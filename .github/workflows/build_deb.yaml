name : Build DEB pipeline

on:
  workflow_call:
    inputs:
      arch:
        description: 'Architecture we want to build for'
        required: true
        type: string

      name:
        description: 'Header name used to build and tag the DEB'
        required: true
        type: string

      version:
        description: 'Version used to build and tag the DEB'
        required: true
        type: string

      revision:
        description: 'Revision of package version'
        required: true
        type: string

      distro:
        description: 'Functional status of package : {UNRELEASED, focal, stable, unstable, -updates, -security, -proposed, -backports}'
        required: true
        type: string

      urgency:
        description: 'Urgency of the package release : {low, medium, high}'
        required: true
        type: string
        default: medium

      note:
        description: 'Message concerning package state of progress'
        required: false
        type: string

      author:
        description: 'Name of the founder of Alumet project'
        required: true
        type: string

      mail:
        description: 'Mail address of Alumet project founder'
        required: true
        type: string

env:
  url: "https://github.com/alumet-dev/alumet.git"
  dependencies: "build-essential devscripts debhelper systemctl"

jobs:
  packaging:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        os: [ "debian:11", "debian:12", "ubuntu:20.04", "ubuntu:22.04", "ubuntu:24.04", "ubuntu:25.04" ]
  
    container:
      image: ${{ matrix.os }}
      options: --cap-add=SYS_NICE --cap-add=PERFMON

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: 'true'

      - name: Set dynamic environment variables
        run: |
          echo "OS_NAME=$(grep '^ID=' "/etc/os-release" | cut -d'=' -f2 | tr -d '"')" >> $GITHUB_ENV
          echo "OS_VERSION=$(grep '^VERSION_ID=' "/etc/os-release" | cut -d'=' -f2 | tr -d '"')" >> $GITHUB_ENV

      - name: Check OS package required dependencies for package construction
        shell: bash
        run: |
          apt update

          dep_pkg=(${{ env.dependencies }})
          for i in "${dep_pkg[@]}"; do
              if ! dpkg -l | grep -q "^ii  $i "; then
                  echo -e "\e[33mWARNING\e[0m : Packages '$i' required. Installation..."
                  DEBIAN_FRONTEND=noninteractive apt-get install -y "$i" || exit
              fi
          done

      - name: Alumet source code downloading from GitHub repository
        shell: bash
        run: |
          base=$(find . -maxdepth 1 -type d -name "${{ inputs.name }}-*")
          dir="${{ inputs.name }}"-"${{ inputs.version }}"

          if [ -d "$base" ]; then
              if [ ! -d "$dir" ]; then
                  mv -f "$base" "$dir"
              fi
          else
              echo "\e[31mERROR\e[0m : No directory '$dir' found."
              exit 1
          fi

          cd "$dir" || exit
          git clone --depth 1 "${{ env.url }}" || exit

      - name: Official DEB package construction with dpkg builder
        shell: bash
        run: |
          export DEBFULLNAME="${{ inputs.author }}"
          export DEBEMAIL="${{ inputs.mail }}"

          cd "${{ inputs.name }}"-"${{ inputs.version }}" || exit
          chmod -R 775 script || exit
          rm -f debian/changelog

          tar -czf ../"${{ inputs.name }}"_"${{ inputs.version }}".orig.tar.gz . || exit
          dch --create --package "${{ inputs.name }}" --newversion "${{ inputs.version }}"-"${{ inputs.revision }}" --distribution "${{ inputs.distro }}" --urgency "${{ inputs.urgency }}" "${{ inputs.note }}" || exit

          dpkg-buildpackage -us -uc

      - name: Cleaning DEB package
        shell: bash
        run: |
          cd "${{ inputs.name }}"-"${{ inputs.version }}" || exit
          dpkg-buildpackage -T clean

      - name: Install the 'Alumet' DEB package created
        shell: bash
        run: |
          mv "${{ inputs.name }}"_"${{ inputs.version }}"-"${{ inputs.revision }}"_"${{ inputs.arch }}".deb "${{ inputs.name }}"_"${{ inputs.version }}"-"${{ inputs.revision }}"_"${{ inputs.arch }}"_"${{ env.OS_NAME }}"_"${{ env.OS_VERSION }}".deb
          apt install ./"${{ inputs.name }}"_"${{ inputs.version }}"-"${{ inputs.revision }}"_"${{ inputs.arch }}"_"${{ env.OS_NAME }}"_"${{ env.OS_VERSION }}".deb || exit

      - name: Testing 'Alumet' package execution after its deployment on system
        shell: bash
        run: |
          ls -l /usr/bin/alumet || exit
          ls -l /usr/lib/alumet/alumet-agent || exit
          ls -l /usr/lib/systemd/system/alumet.service || exit
          ls -l /var/lib/alumet/alumet-config.toml || exit

          alumet exec sleep 1 || exit
          systemctl start alumet.service || exit
          systemctl status alumet.service || exit

      - name: Upload artifact agent
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.name }}_${{ inputs.version }}-${{ inputs.revision }}_${{ inputs.arch }}_${{ env.OS_NAME }}_${{ env.OS_VERSION }}.deb 
          path: |
            ${{ inputs.name }}_${{ inputs.version }}-${{ inputs.revision }}_${{ inputs.arch }}_${{ env.OS_NAME }}_${{ env.OS_VERSION }}.deb  
